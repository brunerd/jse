#!/usr/bin/env zsh
#!/usr/bin/env bash

#choose your shell with the first line, works in either

: <<-LICENSE_BLOCK
jse - JSON String Encoder (https://github.com/brunerd/jse) Copyright (c) 2022 Joel Bruner (https://github.com/brunerd)
Licensed under the MIT License. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
LICENSE_BLOCK

#v1.0.2 - copy the function below to embed jse into your shell scripts, jse.min a minified version is also available
function jse () (
	set +x
	read -r -d '' JSCode <<-'EOT'
	var argument=decodeURIComponent(escape(arguments[0]))
	var fileFlag=decodeURIComponent(escape(arguments[1]))

	if (fileFlag) {
		//load the file
		try { var text = readFile(argument) } catch(error) { throw new Error(error); quit(); };
		//remove trailing newline that get appended
		if (argument === "/dev/stdin") { text = text.slice(0,-1) }
	}
	else { 
		var text=argument		
	}

	print(JSON.stringify(text,null,0))
EOT
	
	#jsc changed location in 10.15, or perhaps this some other *nix
	jsc=$(find "/System/Library/Frameworks/JavaScriptCore.framework/Versions/Current/" -name 'jsc');[ -z "${jsc}" ] && jsc=$(which jsc);

	#no args (zsh or bash)
	if ([ -n "${ARGC}" ] && [ "${ARGC}" = "0" ]) || ([ -z "${ARGC}" ] && [ "${#BASH_ARGC[@]}" = "0" ]); then
		#something is coming in via file redirection
		if [ -f '/dev/stdin' ]; then
			fileFlag=1
			argument="/dev/stdin"
		#or nothing is coming in via pipe
		elif [ -t '0' ]; then
			echo -e "jse (v1.0.2) - JSON String Encoder (https://github.com/brunerd/jse)\nUsage: jse [-f] [argument]\n  [-f] file flag to treat argument as a filepath\n  [argument] convert string or contents of filepath to JSON string\n  Input can also be via file redirection, piped input, here doc, or here string" >/dev/stderr
			exit 0
		fi
	#if we specify this is a file with -f
	elif [ "${1}" = "-f" ] && [ -n "${2}" ]; then
		if [ ! -f "${2}" ]; then
			echo "File not found: ${2}"
			exit 1
		else
			fileFlag=1
			argument="${2}"
		fi
	else
		argument="${1}"		
	fi

	#piped input
	if [ -z "${argument}" ] && [ ! -t '0' ]; then
		"${jsc}" -e "${JSCode}" -- "/dev/stdin" "1" <<< "$(cat)"
	#file/redirection
	else
		"${jsc}" -e "${JSCode}" -- "${argument}" "${fileFlag}"
	fi	
)

jse "$@" 
exit $?
